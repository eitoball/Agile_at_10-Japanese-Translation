スキーに出かけました
James Grenning

1999年に私は初めてエクストリーム・プログラミングについて学んだとき、非常にワクワクしました。それは、過去20年間ソフトウェア開発で遭遇した多くの問題に対して論理的な解決できるようになりました。ペアプログラミングやテスト駆動開発には期待ができましたが少し過激すぎて信頼できませんでした。しかし、少し実際にやってみたら、それらのプラクティスは生産的で楽しいものだということがわかりました。

2000年に、Object Mentor 社に在籍している間、私たちは、エクストリーム・プログラミングの最初の採用者であり主唱者でありました。私たちは多くの開発チームをマンネリから助けることができることを発見したことを知っていました。企業は開発者を帰るために私たちを雇いました。私たちは XP を説明して私たちと同じようにそれを受け入れてもらうというビジョンも持っていました。残念なことに彼らは変わるための準備ができていませんでした。

現行のプラクティスは質のいいソフトウェアを期日までに提供していませんでしたが、XP はあまりにも極端でした。たとえば、「肘あてとヘルメットが必要かい？」と冗談を言うお客さんがいました。その当時の開発者とプロダクトマネージャーが考えていた現状の問題を解決する方法は、もっと多くの事前作業をすることでした。進化する設計と要求での早いフィードバックについての考えはあまりにも異質でした。さて、私たちは続けて、多くの企業が始めるのを助けてきました。その当時、 XP は新しい考えでした。アジャイルという言葉はありませんでした。

2001年の初めに Bob Martin は、Snowbird で行われる XP や他の「軽量」開発手法を始めた人々との会合へ私を誘いました。私は、「いいですよ、私は（スキーへ）行きたいです。」

雪は素晴らしかった。新しい粉雪が2フィートほど積もり、たくさん雪崩が発生するの危険があったぐらいだ。ソフトウェア開発関係者と過ごすのは、ポジティブで、刺激的で、色々と考えさせられた。そこでは競争的な、そして、補足的な展望が議論された。それは、コード中心、モデル中心、そして、人中心。1つの真のソフトウェア開発方法論と実践方法を定義するよりも、我々が共通して持っているものを生命にする
べきであるという素晴らしい考えが出されました。雪が降る中、素晴らしい議論をしながら、慎重に言葉を選び出し、4つの価値が精製されました。

スロープに出る前にもう一つ決めることがあった。それは名前だ。Snowbird へ行くまでは、軽量であることが我々の理念であると密かに考えていた。しかしながら、誰が軽量として知られたいだろうか？しばらくして、アジャイルソフトウェア開発にした。もちろん、企業は機敏であることを望むであろう。最高経営責任者や顧客には XP であると公表するよりもアジャイルであることを説明することはできる。

名前とつけて、声明を発表しました。しかしながら、このことを人々が知った力にかけたりするかどうかはわかりませんでした。その後の何年かけて人々が気にかけていることがわかりました。多くの創造的で情熱的な人々は、アジャイルに引きつけられました。アジャイルは人気獲得し続けて、奥深くなっていきます。10年後、多くのことが変わりましたが、多くのことが未だに同じです。

アジャイルに気づいていない、もしくは、誤解している開発者は多くいます。もっと事前作業が必要であるという考えはソフトウェア開発思考法で深くしみこんでいます。コードベースは混乱していて、チームや製品を休止させています。

幸いにも、人々は毎日アジャイルを発見しています。私が多くの時間を費やしてきた組み込み開発でも疑念を持ってアジャイルに興味を持ってきている。問題と懸念は組み込み開発者ではない人々が提起するものと基本的には同じですが、表面上は、とても違っているように聞こえます。組み込み開発者にとってハードウェアに対する依存は概念上の大きなハードルです。しかし、組み込み開発者ではない人々にとっては UIやデータベースへの依存性があります。それはとても違う問題のようですが、XPとオブジェクト指向設計の技術的な実践においては、それらへの解決法はとても似ています。

インクリメンタルデリバリーはもう1つの概念上のハードルです。インクリメンタルに洗濯機を届けることができますでしょうか？唯一の便利で売り物になるにはトップ10（最も優先度が高い）の機能が製品になければならないという製品の完全性が要求される分野は組み込み開発だけではありません。しかしながら、価値がインクリメンタルに提供することができなくても、測定可能で、可視的でインクリメンタルな進歩から恩恵を受けることができます。

10年後の今、少なくとも1つの新しい問題があります。何人かのスクラムマスターがいてアジャイル開発をしていると宣言している組織があります。しかし、彼らは分析やデザインに何ヶ月を費やして、テストや不具合修正にも同じくぐらいの時間を費やしています。彼らにはストーリーを作りとイテレーションをくりかえしていますが、相対的な見積もりとベロシティを無視しています。テストを書いていません。それで、彼らはどうしてアジャイル開発がうまく行かないか不思議に思っているのです。

変化することはとても難しいですが、変化しなければ向上することはありません。私はチームにきれいなコード、細かいフィードバック、たくさんのテストで働く丁寧な方法を示します。私が何か秘密を持っていると思って、チームの人間は「長くかかりすぎです。もっと早い方法でやりたいです。早いやり方を教えて下さい。」と言います。丁寧は方法こそ最も早い方法です。丁寧であれば、早くできるようになります。10年後にはもっとたくさんの人々がこのような大変は教えを理解することを私は望んでいます。スキー道具を持って10周年記念で Snowbird へ行く時間だ。スキーをして、次の10年を楽しみにしています。新たな改革があるのでしょうか？おそらく。でも、もっとたくさんの進化があることは間違いないです。
