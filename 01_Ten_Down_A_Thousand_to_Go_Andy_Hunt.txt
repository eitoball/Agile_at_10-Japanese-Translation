千里の道も一歩から
Andy Hant

我々は、困難さを楽しみながら、適切で素晴らしいプログラミング言語を使って、人間の思考の本質的制限に配慮しながら、非常に謙虚なプログラマーとして仕事に向かうなら、もっと質の良いプログラムを書くことができるでしょう。」と Edsger W. Dijkstra は、ほぼ40年前、1972年のチューリング賞の講義の終わりに、その賢明なアドバイスを提供しました。しかしながら、プログラミング業界は、このような状況になっていません。

Modula 2や Ada から Java や C#のように長年にわたって次々と出現するプログラミング言語は、適切でもなく洗練されていませんでした。本質的制限を考慮することなく、人間はなにも知らなくても正しい決定をすることができたり、明快に未来を予見して何ヶ月も何年先の計画を立てることができたり、魔法のようにあったこともない見知らぬ顧客の要望に応える動作するコードを書くことができたりすると想定している方法論を用いて仕事をしている。正確に思った通りに動作するコードをすぐに書くことができるとも思っていました。少なくともコンパイルができたら。たぶん、少しの出力命令だけのコードなら大丈夫でしょう。

月日が流れて、Dijkstra の穏やかな議論から30年たってから、アジャイルなソフトウェア開発への活動が、Utah 州の Snowbird で本格化しました。そのときに集まった我々17人は、ソフトウェア開発における最善の方のについて、それぞれ異なる考えを持っていましたが、Dijkstra が言ったように本質的制限に配慮しながら、非常に謙虚なプログラマーとして仕事に向かうことが必要であるという重要な点については合意しました。

ほとんど全員が、Dijkstra のいった「謙虚な」という言葉の意味について理解していました。それは、一度にあまり多くのことをしようとしたりあまり先のことを考えたりしないで少しつずつということです。自分の能力を過信することなく書いたコードを検証や確認していくということです。他の人よりも知識があると思わずに隠し立てせずに正直に次にすることについて議論することです。いままでのソフトウェア開発は、小さくてほのかに光る懐中電灯をもって真っ暗で巨大な洞窟を走り抜けようとするようなものだということに気づきました。その速度で急な崖に向かっているのなら死んでしまうでしょう。

「アジャイル」という言葉が、触媒的に作られてからちょうど10年たった現在、我々はどうしているでしょうか？一般に世の中の人は思ったよりプログラミングがとても難しく、成功するには、適切で素晴らしいツール、柔軟で順応性のある開発手法、そして、経験豊富で寝新な開発者と顧客が必要であるということを悟ったでしょうか？

いいえ、ぜんぜん。

昔の上司と変わらない新しい上司に会ったのなら

学術の世界から考えていきましょう。残念ながら不足しています。アジャイルな手法が推進しているよいソフトウェアエンジニアリング技術は大学などでは広く教えられていません。その手法を「会得」するためのいい場所や優れたプログラムはありますが、一般的にはまったく受け入れられていません。チームで協力して働いたことがないとか、バージョン管理ソフトウェアを使ったことがないとか、ユニットテストを書いたことがないとかいう卒業生がいる学位プログラムが存在します。学術の世界ではまだ受け入れられていません。それでは、企業の世界ではどうでしょう？

昨年の夏、私は、「とても先進的な」アジャイル開発を推進している会社を訪問するという機会に恵まれました。ここで働く人々は、規律正しく、完璧に、他には見られないほど熱心にアジャイル手法を採用していました。色々な点で、彼らはアジャイル手法の申し子でした。そのように優秀で大規模に活動しているのであれば、アジャイル手法は成功しているといえるでしょう。アジャイルという理念が根付いきて、そのような大きな企業においても採用されるようになってきており、奴隷のように働いてきた旧世代のプログラマが信じていたばかげたドグマから解放したのでしょう。

彼らは、ばかげたプロセスドグマから解放された生産的な開発者ではなく、アジャイル手法の奴隷でした。彼らが従っている手法は私たちが考え出したものであり、うまく実施しています。同じような立場の多くの企業において、確かな結果を出しています。継続的なインテグレーション、リファクタリング、ユニットテスト、ペアプログラミング、これらの手法を実施することは良い結果をもたらしてましたが、彼らは考えることをせず、反応することをせず、アジャイルではありませんでした。問題が発生すると彼らはエイリアンの恐ろしい光線に捕獲された鹿のように恐れおののきながらその問題に対処していました。彼らはアジャイル手法を実施することは知っていましたが、アジャイルではありませんでした。

そして、それは引き続く挑戦の一部なのです。基本的な技術を適用することにおいては、私たちはすばらしく進歩しました。数年前まで、共有ディスクにソースコードを置いておいて、「最後に書いた人が勝ち」として、バージョン管理システムを全く使わない会社もありました。いまではそのような会社はかなり少なくなりました。ユニットテストのようなテストはだんだん受け入れられてきており、経営者や出資者からは悪意を持って疑われていたペアプログラミングさえ、以前のようになじみがなくおっかないものではなくなっています。

アジャイルであるということは絶えず起こる新しい問題をうまく解決していくことであるということを理解する必要があります。それについての定石はなく、将来も生み出されることはないでしょう。Patricia Benner 博士は、「プラクティスというものは具現化したり形式化したりすることができません。プラクティスというのは、その都度、生み出されからなのです。」と雄弁に語っています。人々がある特定の状況でうまく働く新しいプラクティスを生み出せるようすることを我々はまだうまくできていません。それは、本当のアジャイルさへの鍵です。ペアプログラミングをすることやスクラム手法のような朝会を開くことではありません。誰でも他の人によって作られた手法に独断的に従うことはできます。

真のアジャイルさは、ドグマを超え、プラクティスをこえたところにあります。アジャイルさは適応することにあります。開発手法、言語、ツール、チーム、そして、あなた自身を手元の状況に対応できるように適応することです。アジャイルさがもたらすものを十分に理解するには、適応できるようになることが必要なのです。

アジャイルの向こうに

これから何をすればいいのでしょうか？Dijkstra の発言のように適切で素晴らしいプログラミング言語を使用して人間の思考の本質的制限に配慮していくようにすることをお勧めします。

Java 言語は、適当で素晴らしくないと思います。Ruby、Clojure、Erlangなどはどうでしょうか？これらの言語は適当で素晴らしいでしょうか？正しいことを簡単に記述できるもっといいプログラミング言語が作り出すことができるでしょうか？どれだけのプログラミング言語を知っていますか？ほんの2つか3つであれば、もうちょっと他の言語を勉強してみて下さい。

本質的制限については、PragPub の（昔のAmiga OS のエラーメッセージについての）「Guru Meditation」という記事が思い当たります。我々人間の頭脳は、一般にこのような作業には最適化されていません。特にアジャイル手法のような作業には。しかしながら、これは始まりです。アジャイルを超えて探求してもいい興味あるトピックがあります。

ドレフュス・モデル。専門家というのは、ただ利口なだけの初心者ではありません。初心者から専門家へなるつれ、問題を解決するための取り組み方から意思疎通の取り方に多くの変化が起こります。ほとんどのチームにおいて、全てのメンバーを同等に扱われます。このことは初心者と専門家の双方に対して色々な点で不公平です。教えること、学ぶこと、そして、チームワーク築くことを指導するための技能を会得するためのドレフュス・モデルの教えを使うことによって、私たちはもっと効率的であることができます。

コミュニケーション。2011年の一般教書において、オバマ大統領は、教育、競争力、そして、インスピレーションについて演説を行いました。演説の最初の言葉は何だったでしょう？「鮭」でした。大統領は（鮭を含む）重なり合う政府の責任を冗談にしました。そして、その言葉が観衆の耳に残りました。人々はあなたが聞いてほしいと思うことをいつも聞いているとは限りません。我々は要求、技術的なニーズ、あらゆる機会について理解し合いません。私たちにはもっといい方法があります。ユーザーの要求を見つけ出すことを手伝うことをしてために聞き取りや共同作業をすることや技術的負債の危険性やリファクタリングの必要性を教えることについてなどの重要な事項について、認識限界についての知識を使うことで、私たちはもっと効率的に理解し合うことができます。

思考の性質。しかしながら、コミュニケーションを改善することは、氷山のまさに一角です。成功するソフトウェア開発に重要である2つの構成要素である創造力と創作力を向上させることができます。私は「リファクタリング・うぇとウェア」において、これらの話題に触れていますが、これは始まりです。ソフトウェア開発と他の「思考」を使う職業を改善するために認知科学や神経科学での研究の多くを適用されることができます。今のところ、我々は、ほとんどを無視しています。いくつかの教訓は直観に反しているようであるからです。今まで教えられてきたことにたような、しかし、私たちの頭脳は、創造的で柔軟であるので、よかれあしかれ、頭脳の働く方法を変えることができます。よくなるように意識的に試してみましょう。

考えることはいろいろあります。